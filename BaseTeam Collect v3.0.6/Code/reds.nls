;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : SoupeGourmande-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to SoupeGourmande-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to SoupeGourmande-team-go-back-to-base
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody and distance b > 5) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ SoupeGourmande-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          SoupeGourmande-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
end

to SoupeGourmande-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    ifelse (free-ahead? 1 != NOBODY) [
    ]
    [
    random-move
    ]
  ]
end

to SoupeGourmande-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report SoupeGourmande-team-no-target?
  report mem5 = 0
end

to SoupeGourmande-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to SoupeGourmande-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ SoupeGourmande-team-set-target x y espece ]]
end

to SoupeGourmande-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to SoupeGourmande-team-select-target
  if (SoupeGourmande-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to SoupeGourmande-team-shoot 
  if (not SoupeGourmande-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to SoupeGourmande-team-set-food-target [ x y ]
  if (SoupeGourmande-team-no-target?) [ set mem0 x set mem1 y set mem5 1 ] 
end

to goRedExplorer
  SoupeGourmande-team-go-back-to-base
  SoupeGourmande-team-go-and-eat

  ifelse (not SoupeGourmande-team-no-target?) [
    SoupeGourmande-team-call-rocket-launcher mem0 mem1 mem2
    SoupeGourmande-team-call-explorer mem0 mem1 mem2
  ]
  [ let h one-of perceive-robots ennemy
    if ( h != nobody ) [ SoupeGourmande-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ]
end

to SoupeGourmande-team-call-harvester [ x y ]
  let h min-one-of perceive-specific-robots color harvesters [ distancexy x y ]
  if (h != nobody) [ ask h [ SoupeGourmande-team-set-food-target x y ]]
end

to SoupeGourmande-team-drive-harvesters
  let food one-of perceive-food
  if (food != nobody) [
    SoupeGourmande-team-call-harvester [xcor] of food [ycor] of food 
  ]
end

to goRedRocketLauncher
  SoupeGourmande-team-go-back-to-base
  SoupeGourmande-team-select-target
  SoupeGourmande-team-shoot
  SoupeGourmande-team-go-and-eat

  if ((energy > 3000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to goRedHarvester
  let f min-one-of perceive-food [ distance myself ]
  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]
  
  let b min-one-of my-bases [ distance myself ]
  
  if (mem4 = 1) and (energy > 100) and (distance b < 5) [set mem4 0]
  
  if(mem4 = 1) or (carrying-food? > 500) or (energy < 100) or (distance b > 20)
  [
    ; retour à la base
    set mem4 1
    ;; rentre à la base si certaines conditions sont vérifiées
    SoupeGourmande-team-go-back-to-base 
  ]
  
  let w min-one-of perceive-walls [ distance myself ]
  if (w != nobody) [ take-wall w ]
  
  if (energy > 100) and (carrying-food? > 100) [ 
      ;; détermine la distance de la base la plus proche
      if (b != nobody) [
        ;; si le robot est à moins de 10 de la base
        ifelse (distance b < 10)
          [ 
            plant-seeds color max-seeds
             
          ]
          [ face b forward-move speed ]
      ]
    ]
    ;; cherche à manger
    SoupeGourmande-team-harvesters-go-and-eat
end

to goRedBase
  let food one-of perceive-food
  if (food != nobody) [
    SoupeGourmande-team-call-harvester [xcor] of food [ycor] of food 
  ]
  
  set label energy
  ifelse (mem6 > 5 ) [ new-Harvester self set mem6 mem6 - 1 ]
  [ new-RocketLauncher self set mem6 mem6 - 1]
  if(mem6 = 0 and energy > 15000) [ new-Harvester self ]
  
  let t one-of perceive-specific-robots ennemy rocketlaunchers
  if (t != nobody) [
    launch-rocket towards t
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rouges
to initRedBase
  new-Explorer self
  set mem6 15
end
